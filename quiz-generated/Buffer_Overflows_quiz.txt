[[Q]] What best describes a buffer overflow in the context of computer security? [[/Q]]  
[[A]] When an attacker erases data from protected memory [[/A]]  
[[A]] When more data is written to a memory location than it can hold, causing data to spill into adjacent memory [[/A]]  
[[A]] When a user accesses memory from a different application [[/A]]  
[[A]] When the system automatically deletes unused memory buffers [[/A]]  
[[A]] When encryption prevents access to a memory location [[/A]]  
[[C]] When more data is written to a memory location than it can hold, causing data to spill into adjacent memory [[/C]]  

[[Q]] How do developers typically defend against buffer overflow attacks? [[/Q]]  
[[A]] Using firewalls to block memory access [[/A]]  
[[A]] Encrypting all user input [[/A]]  
[[A]] Performing bounds checking to limit the amount of data written to memory [[/A]]  
[[A]] Using anti-virus software to scan memory [[/A]]  
[[A]] Disabling user input in applications [[/A]]  
[[C]] Performing bounds checking to limit the amount of data written to memory [[/C]]  

[[Q]] Why might a buffer overflow attack be difficult for an attacker to execute successfully? [[/Q]]  
[[A]] The system automatically ignores excess input [[/A]]  
[[A]] Most systems have built-in overflow protection [[/A]]  
[[A]] The application may crash if the overflow is not perfectly executed [[/A]]  
[[A]] Memory overflows are illegal in modern systems [[/A]]  
[[A]] Firewalls detect buffer overflows easily [[/A]]  
[[C]] The application may crash if the overflow is not perfectly executed [[/C]]  

[[Q]] What is the ultimate goal of an attacker using a buffer overflow exploit? [[/Q]]  
[[A]] To monitor the temperature of the CPU [[/A]]  
[[A]] To corrupt log files [[/A]]  
[[A]] To gain consistent access to privileged application functions [[/A]]  
[[A]] To reset all memory variables [[/A]]  
[[A]] To improve the performance of the application [[/A]]  
[[C]] To gain consistent access to privileged application functions [[/C]]  

[[Q]] In a buffer overflow attack, how can overflowing one variable affect another variable in memory? [[/Q]]  
[[A]] The system automatically merges both variables [[/A]]  
[[A]] The overflow can overwrite adjacent variables, changing their values [[/A]]  
[[A]] It causes the program to restart [[/A]]  
[[A]] It deletes all surrounding variables [[/A]]  
[[A]] The application prevents variable interaction [[/A]]  
[[C]] The overflow can overwrite adjacent variables, changing their values [[/C]]  

[[Q]] What would happen if a developer allows 9 characters to be written into a memory space that only allows 8? [[/Q]]  
[[A]] The ninth character is ignored by the system [[/A]]  
[[A]] The extra character is stored in a log file [[/A]]  
[[A]] The application notifies the user of excess input [[/A]]  
[[A]] The extra character may overflow into another memory location [[/A]]  
[[A]] Nothing, the system automatically adjusts memory size [[/A]]  
[[C]] The extra character may overflow into another memory location [[/C]]  

[[Q]] What is one method an attacker might use to gain administrative access using a buffer overflow? [[/Q]]  
[[A]] Encrypting user credentials [[/A]]  
[[A]] Changing a permission-related variable’s value by overflowing into it from another variable [[/A]]  
[[A]] Using social engineering to reset a password [[/A]]  
[[A]] Deleting administrator files via malware [[/A]]  
[[A]] Logging in with a guest account and escalating through software updates [[/A]]  
[[C]] Changing a permission-related variable’s value by overflowing into it from another variable [[/C]]  

[[Q]] If a buffer overflow causes a permission variable to exceed a threshold of 24,000, what is the likely result? [[/Q]]  
[[A]] The user gets logged out [[/A]]  
[[A]] The user receives administrator-level access [[/A]]  
[[A]] The application crashes [[/A]]  
[[A]] The system enters safe mode [[/A]]  
[[A]] The user account is deleted [[/A]]  
[[C]] The user receives administrator-level access [[/C]]  

[[Q]] Why might a variable that controls application permissions be vulnerable in a buffer overflow? [[/Q]]  
[[A]] It is protected by antivirus software [[/A]]  
[[A]] It is not directly accessible, but can be overwritten from a nearby variable [[/A]]  
[[A]] It is stored in an external file [[/A]]  
[[A]] It resets automatically after each session [[/A]]  
[[A]] It is encrypted using user credentials [[/A]]  
[[C]] It is not directly accessible, but can be overwritten from a nearby variable [[/C]]  

[[Q]] In the provided example, what did the attacker input to trigger the overflow? [[/Q]]  
[[A]] A numeric code of 9999 [[/A]]  
[[A]] The word “admin” [[/A]]  
[[A]] The string “excessive” with 9 characters [[/A]]  
[[A]] A binary string ending in 0xFF [[/A]]  
[[A]] A command-line script [[/A]]  
[[C]] The string “excessive” with 9 characters [[/C]]  

[[Q]] What was the effect of the final character “E” in the attack string on the adjacent permission variable? [[/Q]]  
[[A]] It caused a syntax error in the application [[/A]]  
[[A]] It changed the value of the permission variable to above the admin threshold [[/A]]  
[[A]] It closed the application unexpectedly [[/A]]  
[[A]] It locked out the user [[/A]]  
[[A]] It deleted the variable [[/A]]  
[[C]] It changed the value of the permission variable to above the admin threshold [[/C]]  
