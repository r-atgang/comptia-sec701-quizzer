[[Q]] What is the primary purpose of a cryptographic hash? [[/Q]]
[[A]] To compress data for faster transmission [[/A]]
[[A]] To encrypt messages for confidentiality [[/A]]
[[A]] To reverse engineer original data from fingerprints [[/A]]
[[A]] To represent data as a short, unique string [[/A]]
[[A]] To store encryption keys [[/A]]
[[C]] To represent data as a short, unique string [[/C]]

[[Q]] Which characteristic of a cryptographic hash ensures data has not been tampered with? [[/Q]]
[[A]] Confidentiality [[/A]]
[[A]] Availability [[/A]]
[[A]] Integrity [[/A]]
[[A]] Encryption [[/A]]
[[A]] Obfuscation [[/A]]
[[C]] Integrity [[/C]]

[[Q]] What does changing a single character in input data typically do to the resulting hash? [[/Q]]
[[A]] Produces a nearly identical hash [[/A]]
[[A]] Removes all meaningful output [[/A]]
[[A]] Produces a completely different hash [[/A]]
[[A]] Causes the system to fail [[/A]]
[[A]] Compresses the data [[/A]]
[[C]] Produces a completely different hash [[/C]]

[[Q]] What is a hash collision? [[/Q]]
[[A]] When a hash is reused for storage [[/A]]
[[A]] When two different inputs produce the same hash [[/A]]
[[A]] When hashing takes longer than expected [[/A]]
[[A]] When encryption fails to produce a valid key [[/A]]
[[A]] When a hash becomes unreadable [[/A]]
[[C]] When two different inputs produce the same hash [[/C]]

[[Q]] Which hashing algorithm is no longer recommended due to collision vulnerabilities? [[/Q]]
[[A]] SHA256 [[/A]]
[[A]] RSA [[/A]]
[[A]] AES [[/A]]
[[A]] MD5 [[/A]]
[[A]] DES [[/A]]
[[C]] MD5 [[/C]]

[[Q]] What is the output size of the SHA256 hashing algorithm? [[/Q]]
[[A]] 128 bits [[/A]]
[[A]] 512 characters [[/A]]
[[A]] 64 bits [[/A]]
[[A]] 256 bits [[/A]]
[[A]] 1024 bits [[/A]]
[[C]] 256 bits [[/C]]

[[Q]] What is one common use of hashing when downloading software? [[/Q]]
[[A]] To compress large ISO files [[/A]]
[[A]] To ensure encryption of software updates [[/A]]
[[A]] To verify file integrity against posted hashes [[/A]]
[[A]] To block unauthorized downloads [[/A]]
[[A]] To hide the contents of the file [[/A]]
[[C]] To verify file integrity against posted hashes [[/C]]

[[Q]] Why are passwords stored as hashes rather than plain text or encrypted versions? [[/Q]]
[[A]] Hashes are easier to remember [[/A]]
[[A]] Plain text is more secure [[/A]]
[[A]] Encryption requires less storage space [[/A]]
[[A]] Hashes prevent reverse engineering if properly salted [[/A]]
[[A]] Hashes can be decrypted easily when needed [[/A]]
[[C]] Hashes prevent reverse engineering if properly salted [[/C]]

[[Q]] What is a "salt" in the context of hashing passwords? [[/Q]]
[[A]] A password reset key [[/A]]
[[A]] A symmetric encryption key [[/A]]
[[A]] Random data added to the password before hashing [[/A]]
[[A]] A secondary password [[/A]]
[[A]] A replacement for user authentication [[/A]]
[[C]] Random data added to the password before hashing [[/C]]

[[Q]] Why does salting prevent the use of rainbow tables? [[/Q]]
[[A]] It disables hashing entirely [[/A]]
[[A]] It changes the hashing algorithm used [[/A]]
[[A]] It creates different hashes even for the same passwords [[/A]]
[[A]] It encrypts the passwords instead of hashing them [[/A]]
[[A]] It compresses passwords before hashing [[/A]]
[[C]] It creates different hashes even for the same passwords [[/C]]

[[Q]] What is a rainbow table? [[/Q]]
[[A]] A colorful interface for hashing [[/A]]
[[A]] A file used to encrypt passwords [[/A]]
[[A]] A list of usernames and passwords [[/A]]
[[A]] A precomputed list of password hashes [[/A]]
[[A]] A table that organizes different encryption algorithms [[/A]]
[[C]] A precomputed list of password hashes [[/C]]

[[Q]] How does a digital signature provide authentication? [[/Q]]
[[A]] By hashing the message with a secret key [[/A]]
[[A]] By verifying the source using the sender’s public key [[/A]]
[[A]] By encrypting the entire message [[/A]]
[[A]] By compressing the message contents [[/A]]
[[A]] By comparing the sender’s IP address [[/A]]
[[C]] By verifying the source using the sender’s public key [[/C]]

[[Q]] Which key is used to create a digital signature? [[/Q]]
[[A]] The recipient's private key [[/A]]
[[A]] A symmetric session key [[/A]]
[[A]] The sender’s private key [[/A]]
[[A]] A one-time password [[/A]]
[[A]] The recipient’s public key [[/A]]
[[C]] The sender’s private key [[/C]]

[[Q]] Which of the following is **not** a purpose of a digital signature? [[/Q]]
[[A]] Confidentiality [[/A]]
[[A]] Integrity [[/A]]
[[A]] Authentication [[/A]]
[[A]] Non-repudiation [[/A]]
[[A]] Verifying the source of a message [[/A]]
[[C]] Confidentiality [[/C]]

[[Q]] What happens if a received message’s hash does not match the decrypted digital signature hash? [[/Q]]
[[A]] The message is confirmed to be valid [[/A]]
[[A]] The message is considered encrypted [[/A]]
[[A]] The digital signature is ignored [[/A]]
[[A]] The message is flagged as changed or tampered with [[/A]]
[[A]] The sender is verified [[/A]]
[[C]] The message is flagged as changed or tampered with [[/C]]

[[Q]] What is the first step in creating a digital signature? [[/Q]]
[[A]] Encrypt the message with the recipient’s key [[/A]]
[[A]] Compress the message into a hash [[/A]]
[[A]] Hash the original plaintext message [[/A]]
[[A]] Encrypt the entire message [[/A]]
[[A]] Add salt to the message [[/A]]
[[C]] Hash the original plaintext message [[/C]]

[[Q]] In the example with Alice and Bob, what is sent along with the plaintext message? [[/Q]]
[[A]] An encrypted version of the message [[/A]]
[[A]] A private key [[/A]]
[[A]] A certificate [[/A]]
[[A]] A digital signature [[/A]]
[[A]] A salt value [[/A]]
[[C]] A digital signature [[/C]]

[[Q]] How does Bob verify that Alice sent the message and it wasn’t changed? [[/Q]]
[[A]] He compares Alice’s public and private keys [[/A]]
[[A]] He decrypts the message itself [[/A]]
[[A]] He compares hashes after decrypting the digital signature [[/A]]
[[A]] He calls Alice directly [[/A]]
[[A]] He checks the file size of the message [[/A]]
[[C]] He compares hashes after decrypting the digital signature [[/C]]
