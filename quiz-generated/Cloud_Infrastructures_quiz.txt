[[Q]] What does a responsibility matrix provided by a cloud provider typically define? [[/Q]]
[[A]] The performance benchmarks of cloud services [[/A]]
[[A]] The pricing structure of different cloud services [[/A]]
[[A]] Who manages specific components in cloud-based services [[/A]]
[[A]] The geographic locations of data centers [[/A]]
[[A]] Types of applications supported in the cloud [[/A]]
[[C]] Who manages specific components in cloud-based services [[/C]]

[[Q]] In a responsibility matrix, who is generally responsible for managing accounts and identities? [[/Q]]
[[A]] The cloud provider [[/A]]
[[A]] Both the cloud provider and customer equally [[/A]]
[[A]] A third-party security vendor [[/A]]
[[A]] The customer [[/A]]
[[A]] The government [[/A]]
[[C]] The customer [[/C]]

[[Q]] What is a hybrid cloud? [[/Q]]
[[A]] A cloud service that runs only on private networks [[/A]]
[[A]] A mixture of traditional on-prem systems and monolithic apps [[/A]]
[[A]] A combination of public and private clouds or multiple cloud providers [[/A]]
[[A]] A temporary cloud deployment for testing [[/A]]
[[A]] A backup method for cloud environments [[/A]]
[[C]] A combination of public and private clouds or multiple cloud providers [[/C]]

[[Q]] What challenge is commonly associated with managing a hybrid cloud environment? [[/Q]]
[[A]] Increased download speeds across providers [[/A]]
[[A]] Uniform configuration interfaces across providers [[/A]]
[[A]] Direct communication between cloud providers [[/A]]
[[A]] Configuration mismatches between providers [[/A]]
[[A]] Instantaneous data syncing [[/A]]
[[C]] Configuration mismatches between providers [[/C]]

[[Q]] What must be secured when transferring data between cloud providers in a hybrid cloud? [[/Q]]
[[A]] DNS queries [[/A]]
[[A]] Internal switch configurations [[/A]]
[[A]] Data in transit [[/A]]
[[A]] Printer settings [[/A]]
[[A]] The end-user interface [[/A]]
[[C]] Data in transit [[/C]]

[[Q]] Why is vendor risk management important in cloud environments? [[/Q]]
[[A]] To reduce software licensing fees [[/A]]
[[A]] To choose the cheapest hardware [[/A]]
[[A]] To manage third-party technologies and their security [[/A]]
[[A]] To optimize network latency [[/A]]
[[A]] To block all third-party integrations [[/A]]
[[C]] To manage third-party technologies and their security [[/C]]

[[Q]] What does infrastructure as code allow organizations to do? [[/Q]]
[[A]] Convert physical hardware into virtual code [[/A]]
[[A]] Build and manage infrastructure using hardware instead of code [[/A]]
[[A]] Write applications in a non-programmatic way [[/A]]
[[A]] Define and manage infrastructure using code [[/A]]
[[A]] Monitor user activity across the cloud [[/A]]
[[C]] Define and manage infrastructure using code [[/C]]

[[Q]] What is a major benefit of using infrastructure as code in cloud computing? [[/Q]]
[[A]] It eliminates the need for network security [[/A]]
[[A]] It allows the reuse and redeployment of the same infrastructure setup [[/A]]
[[A]] It improves desktop compatibility [[/A]]
[[A]] It simplifies the use of monolithic applications [[/A]]
[[A]] It enables cloud-to-cloud teleportation [[/A]]
[[C]] It allows the reuse and redeployment of the same infrastructure setup [[/C]]

[[Q]] What best describes a serverless architecture? [[/Q]]
[[A]] An architecture where servers are physically hidden [[/A]]
[[A]] Applications run on user devices only [[/A]]
[[A]] An architecture where individual functions are deployed without managing servers [[/A]]
[[A]] Software runs without needing power [[/A]]
[[A]] A fully offline computing model [[/A]]
[[C]] An architecture where individual functions are deployed without managing servers [[/C]]

[[Q]] What is a key cost benefit of serverless architecture? [[/Q]]
[[A]] Unlimited compute usage regardless of use [[/A]]
[[A]] Free use of all cloud resources [[/A]]
[[A]] Pay only when application functions are used [[/A]]
[[A]] Permanent storage of inactive containers [[/A]]
[[A]] Automatic software development [[/A]]
[[C]] Pay only when application functions are used [[/C]]

[[Q]] In a serverless architecture, what aspect becomes less important? [[/Q]]
[[A]] Network topology [[/A]]
[[A]] User authentication [[/A]]
[[A]] Operating system management [[/A]]
[[A]] Database indexing [[/A]]
[[A]] Encryption standards [[/A]]
[[C]] Operating system management [[/C]]

[[Q]] How are traditional monolithic applications typically structured? [[/Q]]
[[A]] As a series of lightweight cloud functions [[/A]]
[[A]] Using distributed microservices [[/A]]
[[A]] As a single large executable running on local machines [[/A]]
[[A]] Through third-party containers [[/A]]
[[A]] Entirely in browser-based sandboxes [[/A]]
[[C]] As a single large executable running on local machines [[/C]]

[[Q]] What must occur when updating a monolithic application? [[/Q]]
[[A]] Only the cloud backend needs updates [[/A]]
[[A]] All microservices must be rewritten [[/A]]
[[A]] The entire application must be reinstalled on each machine [[/A]]
[[A]] The API gateway must be reconfigured [[/A]]
[[A]] The code base must be converted to JavaScript [[/A]]
[[C]] The entire application must be reinstalled on each machine [[/C]]

[[Q]] What is the main purpose of APIs in a microservice architecture? [[/Q]]
[[A]] To physically connect hardware modules [[/A]]
[[A]] To generate encryption keys [[/A]]
[[A]] To allow communication between microservices and clients [[/A]]
[[A]] To monitor employee productivity [[/A]]
[[A]] To design server rooms [[/A]]
[[C]] To allow communication between microservices and clients [[/C]]

[[Q]] What benefit does microservice architecture offer in terms of scalability? [[/Q]]
[[A]] All services must scale together [[/A]]
[[A]] It cannot scale in cloud environments [[/A]]
[[A]] Individual services can scale independently to handle demand [[/A]]
[[A]] Scalability depends only on RAM size [[/A]]
[[A]] Services can only scale during off-hours [[/A]]
[[C]] Individual services can scale independently to handle demand [[/C]]

[[Q]] How does microservice architecture improve application resilience? [[/Q]]
[[A]] By preventing any failures in the system [[/A]]
[[A]] By isolating failures to individual services [[/A]]
[[A]] By turning off unused services permanently [[/A]]
[[A]] By using a single point of failure [[/A]]
[[A]] By avoiding all updates [[/A]]
[[C]] By isolating failures to individual services [[/C]]

[[Q]] How is security applied in a microservice architecture? [[/Q]]
[[A]] Security is ignored since services are small [[/A]]
[[A]] The same security policy is applied to all services [[/A]]
[[A]] Each microservice can have customized security policies [[/A]]
[[A]] Security is handled only at the user interface [[/A]]
[[A]] Only encryption is used for protection [[/A]]
[[C]] Each microservice can have customized security policies [[/C]]
