[[Q]] What does the abbreviation XSS stand for in cybersecurity? [[/Q]]
[[A]] Cross-Site Software [[/A]]
[[A]] Cross-System Sharing [[/A]]
[[A]] Cross-Site Scripting [[/A]]
[[A]] Cross-Security Session [[/A]]
[[A]] Cross-Script Support [[/A]]
[[C]] Cross-Site Scripting [[/C]]

[[Q]] Why is the abbreviation XSS used instead of CSS for Cross-Site Scripting? [[/Q]]
[[A]] CSS is reserved for Cascading Style Sheets [[/A]]
[[A]] XSS sounds more technical [[/A]]
[[A]] XSS is easier to pronounce [[/A]]
[[A]] CSS is outdated terminology [[/A]]
[[A]] XSS is a newer security standard [[/A]]
[[C]] CSS is reserved for Cascading Style Sheets [[/C]]

[[Q]] What does a cross-site scripting (XSS) vulnerability exploit? [[/Q]]
[[A]] Trust between two attackers [[/A]]
[[A]] Insecure browser plug-ins [[/A]]
[[A]] Trust a browser has in a website [[/A]]
[[A]] Operating system vulnerabilities [[/A]]
[[A]] Faulty encryption algorithms [[/A]]
[[C]] Trust a browser has in a website [[/C]]

[[Q]] What language is commonly used in XSS attacks? [[/Q]]
[[A]] Python [[/A]]
[[A]] PHP [[/A]]
[[A]] HTML [[/A]]
[[A]] JavaScript [[/A]]
[[A]] SQL [[/A]]
[[C]] JavaScript [[/C]]

[[Q]] In a non-persistent XSS attack, what is typically used to deliver the malicious script? [[/Q]]
[[A]] A downloadable executable file [[/A]]
[[A]] A pop-up advertisement [[/A]]
[[A]] A specially crafted link [[/A]]
[[A]] A DNS spoofed address [[/A]]
[[A]] A browser extension [[/A]]
[[C]] A specially crafted link [[/C]]

[[Q]] What does a non-persistent (reflected) XSS attack involve? [[/Q]]
[[A]] Malware embedded in the browser [[/A]]
[[A]] JavaScript posted permanently to a forum [[/A]]
[[A]] An attacker injecting malicious code into user input [[/A]]
[[A]] A victim downloading a malicious app [[/A]]
[[A]] Use of expired SSL certificates [[/A]]
[[C]] An attacker injecting malicious code into user input [[/C]]

[[Q]] What is the main danger of an XSS vulnerability in an e-commerce credit card form? [[/Q]]
[[A]] Slower payment processing [[/A]]
[[A]] Unavailable shopping features [[/A]]
[[A]] Malicious scripts can access session information [[/A]]
[[A]] Customers must re-enter data repeatedly [[/A]]
[[A]] Items disappear from shopping carts [[/A]]
[[C]] Malicious scripts can access session information [[/C]]

[[Q]] What differentiates a persistent XSS attack from a non-persistent one? [[/Q]]
[[A]] Persistent attacks use hardware flaws [[/A]]
[[A]] Persistent attacks are launched via email [[/A]]
[[A]] Persistent attacks store the script on a website [[/A]]
[[A]] Persistent attacks only affect internal users [[/A]]
[[A]] Persistent attacks involve browser plug-ins [[/A]]
[[C]] Persistent attacks store the script on a website [[/C]]

[[Q]] How can a persistent XSS attack spread across users on social media? [[/Q]]
[[A]] Through software updates [[/A]]
[[A]] Through Wi-Fi sniffing tools [[/A]]
[[A]] Through JavaScript that replicates itself [[/A]]
[[A]] Through links that disable user accounts [[/A]]
[[A]] Through browser extensions [[/A]]
[[C]] Through JavaScript that replicates itself [[/C]]

[[Q]] What vulnerability was found on Subaru’s website in June 2017? [[/Q]]
[[A]] Passwords stored in plain text [[/A]]
[[A]] SQL injection allowing login bypass [[/A]]
[[A]] Token-based access without expiration [[/A]]
[[A]] Unencrypted email transmission [[/A]]
[[A]] Lack of CAPTCHA validation [[/A]]
[[C]] Token-based access without expiration [[/C]]

[[Q]] What made Subaru’s token vulnerability especially dangerous? [[/Q]]
[[A]] Tokens expired after each login [[/A]]
[[A]] Tokens could not be reused [[/A]]
[[A]] Tokens allowed full access and never expired [[/A]]
[[A]] Tokens were encrypted with weak ciphers [[/A]]
[[A]] Tokens were tied to IP address only [[/A]]
[[C]] Tokens allowed full access and never expired [[/C]]

[[Q]] What action allowed attackers to access other Subaru accounts? [[/Q]]
[[A]] Changing the VIN number [[/A]]
[[A]] Sending an SMS message [[/A]]
[[A]] Adding their email to a victim’s account [[/A]]
[[A]] Resetting the server token [[/A]]
[[A]] Spoofing DNS entries [[/A]]
[[C]] Adding their email to a victim’s account [[/C]]

[[Q]] What is a key way to prevent XSS attacks as a user? [[/Q]]
[[A]] Use the same browser for all activities [[/A]]
[[A]] Only click links from trusted sources [[/A]]
[[A]] Install multiple antivirus tools [[/A]]
[[A]] Disable all browser extensions [[/A]]
[[A]] Use incognito mode only [[/A]]
[[C]] Only click links from trusted sources [[/C]]

[[Q]] How can disabling JavaScript impact XSS protection? [[/Q]]
[[A]] Completely prevents XSS on all sites [[/A]]
[[A]] Blocks all browser functionality [[/A]]
[[A]] Limits JavaScript-based attacks but may reduce functionality [[/A]]
[[A]] Enables more secure plugins [[/A]]
[[A]] Forces HTTPS on all websites [[/A]]
[[C]] Limits JavaScript-based attacks but may reduce functionality [[/C]]

[[Q]] What is the most effective way to keep browsers safe from XSS vulnerabilities? [[/Q]]
[[A]] Avoid using social media [[/A]]
[[A]] Use only mobile browsers [[/A]]
[[A]] Update browsers and apps regularly [[/A]]
[[A]] Switch to non-JavaScript browsers [[/A]]
[[A]] Limit web usage [[/A]]
[[C]] Update browsers and apps regularly [[/C]]

[[Q]] What should developers do to prevent XSS in input fields? [[/Q]]
[[A]] Remove all input boxes from the site [[/A]]
[[A]] Encrypt the site’s DNS address [[/A]]
[[A]] Validate and sanitize all user input [[/A]]
[[A]] Enable two-factor authentication [[/A]]
[[A]] Use third-party analytics only [[/A]]
[[C]] Validate and sanitize all user input [[/C]]
