[[Q]] What is the primary purpose of a vulnerability scan? [[/Q]]
[[A]] To exploit vulnerabilities in a system [[/A]]
[[A]] To block unauthorized access to a network [[/A]]
[[A]] To determine if a system might be susceptible to attack [[/A]]
[[A]] To install patches on vulnerable systems [[/A]]
[[A]] To permanently disable insecure ports [[/A]]
[[C]] To determine if a system might be susceptible to attack [[/C]]

[[Q]] How does a port scan relate to vulnerability scanning? [[/Q]]
[[A]] It verifies user credentials for access [[/A]]
[[A]] It patches open ports automatically [[/A]]
[[A]] It identifies open and closed ports on a system [[/A]]
[[A]] It encrypts data sent across open ports [[/A]]
[[A]] It launches attacks on detected vulnerabilities [[/A]]
[[C]] It identifies open and closed ports on a system [[/C]]

[[Q]] Why is it important to scan internally within a network, not just externally? [[/Q]]
[[A]] To avoid scanning the same systems repeatedly [[/A]]
[[A]] Because internal devices are always patched [[/A]]
[[A]] To detect insider threats or internal attackers [[/A]]
[[A]] Because external scans are too slow [[/A]]
[[A]] To bypass firewall restrictions [[/A]]
[[C]] To detect insider threats or internal attackers [[/C]]

[[Q]] What is a known limitation of vulnerability scans? [[/Q]]
[[A]] They guarantee that all systems are secure [[/A]]
[[A]] They always require manual patching [[/A]]
[[A]] They often produce false positives [[/A]]
[[A]] They provide insufficient data for review [[/A]]
[[A]] They do not detect port numbers [[/A]]
[[C]] They often produce false positives [[/C]]

[[Q]] What does a static application security testing system analyze? [[/Q]]
[[A]] Running software in production [[/A]]
[[A]] Physical network devices [[/A]]
[[A]] Operating system configurations [[/A]]
[[A]] Application source code for vulnerabilities [[/A]]
[[A]] Firewall rule sets [[/A]]
[[C]] Application source code for vulnerabilities [[/C]]

[[Q]] Which vulnerability might not be detected by a static code analyzer? [[/Q]]
[[A]] SQL injection [[/A]]
[[A]] Buffer overflow [[/A]]
[[A]] Insecure cryptographic implementation [[/A]]
[[A]] Hard-coded passwords [[/A]]
[[A]] Undefined variables [[/A]]
[[C]] Insecure cryptographic implementation [[/C]]

[[Q]] What is the purpose of fuzzing in dynamic analysis? [[/Q]]
[[A]] To monitor CPU temperature under load [[/A]]
[[A]] To encrypt application data [[/A]]
[[A]] To identify outdated software packages [[/A]]
[[A]] To test application responses to random input [[/A]]
[[A]] To automate source code formatting [[/A]]
[[C]] To test application responses to random input [[/C]]

[[Q]] What is another name for fuzzing? [[/Q]]
[[A]] Static code compilation [[/A]]
[[A]] Packet filtering [[/A]]
[[A]] Data masking [[/A]]
[[A]] Fault injecting [[/A]]
[[A]] Port mirroring [[/A]]
[[C]] Fault injecting [[/C]]

[[Q]] What tool is available from CERT for performing fuzzing? [[/Q]]
[[A]] Secure App Tester (SAT) [[/A]]
[[A]] Vulnerability Injector Suite (VIS) [[/A]]
[[A]] Random Data Engine (RDE) [[/A]]
[[A]] Basic Fuzzing Framework (BFF) [[/A]]
[[A]] Secure Code Analyzer (SCA) [[/A]]
[[C]] Basic Fuzzing Framework (BFF) [[/C]]

[[Q]] Why is fuzzing typically automated? [[/Q]]
[[A]] Manual fuzzing is illegal [[/A]]
[[A]] It reduces CPU usage [[/A]]
[[A]] It only works during business hours [[/A]]
[[A]] It requires hundreds or thousands of input variations [[/A]]
[[A]] Applications crash instantly otherwise [[/A]]
[[C]] It requires hundreds or thousands of input variations [[/C]]

[[Q]] What should be verified before installing a downloaded software package? [[/Q]]
[[A]] That it has a .exe extension [[/A]]
[[A]] That it contains at least 100 MB of data [[/A]]
[[A]] That it was downloaded from the official source [[/A]]
[[A]] That it runs on all major operating systems [[/A]]
[[A]] That it has a GUI installer [[/A]]
[[C]] That it was downloaded from the official source [[/C]]

[[Q]] Why might you test a software package in a lab before production deployment? [[/Q]]
[[A]] To check the softwareâ€™s color scheme [[/A]]
[[A]] To verify the package's cost effectiveness [[/A]]
[[A]] To ensure compatibility with mobile apps [[/A]]
[[A]] To understand and verify what the package contains [[/A]]
[[A]] To shorten installation time [[/A]]
[[C]] To understand and verify what the package contains [[/C]]

[[Q]] What is an example of a critical vulnerability found during a scan? [[/Q]]
[[A]] Open ports with proper encryption [[/A]]
[[A]] Weak SSH host keys from a poor random number generator [[/A]]
[[A]] Systems with large disk usage [[/A]]
[[A]] Installed antivirus software [[/A]]
[[A]] Duplicate MAC addresses on the network [[/A]]
[[C]] Weak SSH host keys from a poor random number generator [[/C]]

[[Q]] What type of vulnerability is flagged when an outdated Unix OS is detected? [[/Q]]
[[A]] Buffer overflow [[/A]]
[[A]] High bandwidth usage [[/A]]
[[A]] Lack of data encryption [[/A]]
[[A]] Unsupported system version vulnerability [[/A]]
[[A]] Invalid IP addressing [[/A]]
[[C]] Unsupported system version vulnerability [[/C]]

[[Q]] What is the recommended action after confirming a vulnerability in a scan report? [[/Q]]
[[A]] Immediately remove the device from the network [[/A]]
[[A]] Ignore the report until the next scan [[/A]]
[[A]] Share the report with all users [[/A]]
[[A]] Put the issue through a change control process [[/A]]
[[A]] Reboot the system [[/A]]
[[C]] Put the issue through a change control process [[/C]]
